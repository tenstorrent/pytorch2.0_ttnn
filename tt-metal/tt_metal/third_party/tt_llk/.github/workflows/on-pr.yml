name: 🛠️ PR Pipeline
on:
  push:
    branches: ["main"]
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: ["main"]
  merge_group:

permissions:
  checks: write
  contents: read
  packages: write
  pull-requests: write

concurrency:
  # Use github.run_id on main branch (or any protected branch)
  # This ensures that no runs get cancelled on main.
  # Use github.event.pull_request.number on pull requests, so it's unique per pull request
  # and will cancel obsolete runs.
  # Use github.ref on other branches, so it's unique per branch.
  group: ${{ github.workflow }}-${{ github.ref_protected && github.run_id ||
    github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit:
    name: "🔍 Static checks"
    uses: ./.github/workflows/pre-commit.yml

  detect-changes:
    name: "🔍 Detect changes"
    runs-on: ubuntu-latest
    needs: pre-commit
    outputs:
      wormhole: ${{ steps.filter.outputs.wormhole }}
      blackhole: ${{ steps.filter.outputs.blackhole }}
      tests: ${{ steps.filter.outputs.tests }}
      github: ${{ steps.filter.outputs.github }}
      documentation: ${{ steps.filter.outputs.documentation }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history so 'origin/main' is available

      - name: Detect which directories changed
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
              wormhole:
                - 'tt_llk_wormhole_b0/**'
              blackhole:
                - 'tt_llk_blackhole/**'
              tests:
                - 'tests/**'
              github:
                - '.github/**'
              documentation:
                - 'docs/**'
                - '**/*.md'
                - '**/*.rst'

  label-pr:
    name: "🏷️ Label PR"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      github.event_name == 'pull_request' &&
      github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Sync labels based on changes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const expectedLabels = new Set();
            if ("${{ needs.detect-changes.outputs.blackhole }}" === "true") expectedLabels.add("blackhole");
            if ("${{ needs.detect-changes.outputs.wormhole }}" === "true") expectedLabels.add("wormhole");
            if ("${{ needs.detect-changes.outputs.tests }}" === "true") expectedLabels.add("test-infra");
            if ("${{ needs.detect-changes.outputs.github }}" === "true") expectedLabels.add("ci");
            if ("${{ needs.detect-changes.outputs.documentation }}" === "true") expectedLabels.add("documentation");

            // Get current labels
            const {data: currentLabels} = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            // Create sets for comparison
            const managedLabels = new Set(["blackhole", "ci", "documentation", "test-infra", "wormhole"]);
            const currentLabelSet = new Set(currentLabels.map(label => label.name));

            // Calculate labels to add and remove
            const labelsToAdd = [...expectedLabels].filter(label => !currentLabelSet.has(label));
            const labelsToRemove = [...currentLabelSet]
              .filter(label => managedLabels.has(label) && !expectedLabels.has(label));

            // Add new labels if needed
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labelsToAdd
              });
            }

            // Remove outdated labels in parallel
            if (labelsToRemove.length > 0) {
              await Promise.all(labelsToRemove.map(label =>
                github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label
                })
              ));
            }

  build-images:
    name: "🐳️ Docker setup"
    uses: ./.github/workflows/build-images.yml
    needs: pre-commit
    secrets: inherit

  setup-and-test-wormhole:
    name: "🌀 Perform checks (Wormhole)"
    uses: ./.github/workflows/setup-and-test.yml
    needs: [build-images, detect-changes]
    if: ${{ needs.detect-changes.outputs.wormhole == 'true' ||
            needs.detect-changes.outputs.tests == 'true' ||
            needs.detect-changes.outputs.github == 'true' }}
    with:
      docker_image: ${{ needs.build-images.outputs.docker-image }}
      runs_on: tt-beta-ubuntu-2204-n150-large-stable
      test_group: "[1, 2, 3]"

  setup-and-test-blackhole:
    name: "🕳️ Perform checks (Blackhole)"
    uses: ./.github/workflows/setup-and-test.yml
    needs: [build-images, detect-changes]
    if: ${{ needs.detect-changes.outputs.blackhole == 'true' ||
            needs.detect-changes.outputs.tests == 'true' ||
            needs.detect-changes.outputs.github == 'true' }}
    with:
      docker_image: ${{ needs.build-images.outputs.docker-image }}
      runs_on: p150
      test_group: "[1]"

  check-all-green:
    name: "✅ Check all green"
    if: always()
    needs:
      - pre-commit
      - build-images
      - setup-and-test-wormhole
      - setup-and-test-blackhole
    runs-on: ubuntu-latest
    steps:
      - name: Check if the required jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          allowed-skips: setup-and-test-wormhole, setup-and-test-blackhole
