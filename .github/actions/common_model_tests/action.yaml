name: 'Run Model tests'
description: 'Run Model tests'
inputs:
    splits:
      description: 'Number of splits for test distribution'
      required: true
    commit_report:
      description: 'Commit report input (None, Docs, All)'
      required: false
      default: 'None'
    matrix_group:
      description: 'Matrix group index for splitting tests'
      required: true
runs:
  using: "composite"
  steps:
    - name: Run Model Tests
      shell: bash
      run: |
        set +e
        if [ "${{ inputs.commit_report }}" == "None" ]; then
          num_iterations=1
          run_tracy=false
        else
          num_iterations=5
          run_tracy=true
        fi

        check_exit_code() {
          exit_code=$?
          if [ $exit_code -eq 5 ]; then
            if [ ${{ matrix.group }} -eq 0 ]; then
              echo "Error: pytest returned exit code 5 (No tests to run) in the first test group.";
              exit 1;  # Fail the workflow
            else
              echo "Success: pytest returned exit code 5 (No tests to run). This is acceptable for groups greater than 0.";
              exit 0;  # Success
            fi
          elif [ $exit_code -ne 0 ]; then
            echo "Failure: Tests failed with exit code $exit_code.";
            exit 1;  # Fail the workflow for other errors
          fi
        }

        if [ "$run_tracy" = true ];
        then
          echo "Copying tt-metal build from NFS cache ($CACHE_DIR)."

          # tt-metal cache
          rm -rf tools/third-party/tt-metal/*
          cp -af $CACHE_DIR/tt-metal/* tools/third-party/tt-metal/

          ls -l tools/third-party/tt-metal/

          source tools/third-party/tt-metal/python_env/bin/activate

          export TT_METAL_HOME=$(realpath ./tools/third-party/tt-metal)
          export PYTHONPATH="$(pwd):${TT_METAL_HOME}"
          echo "TT_METAL_HOME: $TT_METAL_HOME"
          echo "PYTHONPATH: $PYTHONPATH"

          # pip install -e "$TT_METAL_HOME"
          pip list

          collect_tests=$(python -m pytest tests/models/ --collect-only -m e2e_with_native_integration --splits ${{ inputs.splits }} --group ${{ matrix.group }} -q | head -n -2 | tail -n +10)
          check_exit_code

          test_names=$(echo "$collect_tests" | sed -n "s/.*:://p")

          # Turn string lists into arrays
          set -o noglob
          IFS=$'\n' tests_full_path=($collect_tests)
          IFS=$'\n' tests_name_only=($test_names)
          set +o noglob

          echo "Collected tests: $tests_name_only"

          # Check if marker exists
          # If we include the tracy module in the command line, tracy will still do some 
          # processing and if the nth_iteration is > 2, it might segfault if we don't insert any 
          # ReadDeviceProfiler calls.
          for i in "${!tests_full_path[@]}"; do
            python3 -m tracy -r -v -p -m -o "tracy_out/${tests_name_only[i]}" \
              pytest --github-report "tests/${tests_full_path[i]}" -s \
              --report_nth_iteration=$num_iterations \
              --export_code=accuracy \
              --tracy_profiling="e2e"

            check_exit_code
          done

        else
          python3 -m pytest --github-report tests/models/ --report_nth_iteration=$num_iterations --export_code=accuracy --splits ${{ inputs.splits }} --group ${{ matrix.group }} -s
          check_exit_code
        fi

        echo "Success: Tests passed!";
        exit 0;
